clc;
clear;
addpath('X:\SWCNTs');

addpath('X:\Measurements Data\Raman');
%addpath('C:\Users\Cristian Borja\OneDrive - Universiteit Antwerpen\SWCNTs\');
import UsefulFunctions.*;

%rootpath = 'C:\Users\Cristian Borja\OneDrive - Universiteit Antwerpen\Measurements Data\Raman\';
rootpath = 'X:\Measurements Data\Raman';

%All paths as default
path_20240426 = [rootpath,'\20240426\'];
path_20240514 = [rootpath,'\20240514\'];
path_20240515 = [rootpath,'\20240515\'];
path_20240614 = [rootpath,'\20240614\'];
path_20240620 = [rootpath,'\20240620\'];
path_20240628 = [rootpath,'\20240628\'];

%Select the paths of interest

paths = {
    path_20240426
    path_20240514
    path_20240515
    path_20240614
    path_20240620
    path_20240628
    };

ReadRamanFromPaths(paths);

%%% --------------------------------------------------------
%%%           Correcting for sensitivity detector and inclination and
%%%           cutting edges away
%%% --------------------------------------------------------

%%  DATA 20240426 FIRST TEST SAMPLES JUST RBMS, D AND G BAND  AT 650nm

% DATA_20240426.BAL650R = clipRangeEdges(DATA_20240426.BAL650R, 120,400)
DATA_20240426.BBL650RA = clipRangeEdges(DATA_20240426.BBL650RA, 120,2000)
% DATA_20240426.BAL650RB = clipRangeEdges(DATA_20240426.BAL650RB, 380,520)
% DATA_20240426.BBL650RB = clipRangeEdges(DATA_20240426.BBL650RB, 0,520)
% DATA_20240426.BBL650D = clipRangeEdges(DATA_20240426.BBL650D, 1230,1444)
% DATA_20240426.BAL650D = clipRangeEdges(DATA_20240426.BAL650D, 1230,1444)
% DATA_20240426.BAL650G = clipRangeEdges(DATA_20240426.BAL650G, 1430,1640)
% DATA_20240426.BBL650G = clipRangeEdges(DATA_20240426.BBL650G, 1430,1640)

DATA_20240426.BAL650R = remove_gaussian_profile(DATA_20240426.BAL650R, 120)

TestSamples650={
         DATA_20240426.BAL650R
         DATA_20240426.BAL650RB
         DATA_20240426.BAL650D
         DATA_20240426.BAL650G
         
         DATA_20240426.BBL650RA
         DATA_20240426.BBL650RB
         DATA_20240426.BBL650D
         DATA_20240426.BBL650G 
        };
WL = 650;

for i=1:length(TestSamples650)
    current = TestSamples650{i};  % Access the cell array element once
    current = clip_spectrum(current, 10,10);
    current = remove_inclination(current, WL);
    current = correct_instrument_response(current, WL);
    current = remove_bg_poly(current);
    TestSamples650{i} = current;  % Save the result back to the cell array
end

% plotRaman(TestSamples650, 0.0)





%% DATA 20240514 FIRST TEST SAMPLES JUST G BAND AND CARBINE REGION AT 650nm

% DATA_20240514.BBL650C1 = clipRangeEdges(DATA_20240514.BBL650C1, 1690,1900)
% DATA_20240514.BAL650C1 = clipRangeEdges(DATA_20240514.BAL650C1, 1690,1900)
% DATA_20240514.BBL650C2 = clipRangeEdges(DATA_20240514.BBL650C2, 1490,1705)
% DATA_20240514.BAL650C2 = clipRangeEdges(DATA_20240514.BAL650C2, 1490,1705)

TestSamplesB650={
    DATA_20240514.BAL650C2    
    DATA_20240514.BAL650C1
    
    DATA_20240514.BBL650C2
    DATA_20240514.BBL650C1
    };

WL = 650;

for i=1:length(TestSamplesB650)
    current = TestSamplesB650{i};  % Access the cell array element once
    current = clip_spectrum(current, 10,10);
    current = remove_inclination(current, WL);
    current = correct_instrument_response(current, WL);
    current = remove_bg_poly(current);
    TestSamplesB650{i} = current;  % Save the result back to the cell array
end

% plotRaman(TestSamplesB650, 0.0)


%% DATA 20240515 FIRST TEST SAMPLES FULL SPEC AT 570nm

DATA_20240515.BAL570RA = clipRangeEdges(DATA_20240515.BAL570RA, 134, 2000)
DATA_20240515.BBL570RA = clipRangeEdges(DATA_20240515.BBL570RA, 134, 2000)
% 
% DATA_20240515.BAL570RB = clipRangeEdges(DATA_20240515.BAL570RB, 420,780)
% DATA_20240515.BBL570RB = clipRangeEdges(DATA_20240515.BBL570RB, 420,780)
% 
% DATA_20240515.BAL570D = clipRangeEdges(DATA_20240515.BAL570D, 1080,1400)
% DATA_20240515.BBL570D = clipRangeEdges(DATA_20240515.BBL570D, 1080,1400)
% 
% DATA_20240515.BAL570G = clipRangeEdges(DATA_20240515.BAL570G, 1390,1700)
% DATA_20240515.BBL570G = clipRangeEdges(DATA_20240515.BBL570G, 1390,1700)
% 
% DATA_20240515.BAL570C = clipRangeEdges(DATA_20240515.BAL570C, 1690,1990)
% DATA_20240515.BBL570C = clipRangeEdges(DATA_20240515.BBL570C, 1690,1990)

TestSamples570={
        DATA_20240515.BAL570RA
        DATA_20240515.BAL570RB
        DATA_20240515.BAL570D
        DATA_20240515.BAL570G
        DATA_20240515.BAL570C

        DATA_20240515.BBL570RA
        DATA_20240515.BBL570RB
        DATA_20240515.BBL570D
        DATA_20240515.BBL570G
        DATA_20240515.BBL570C
    };

WL = 570;

for i=1:length(TestSamples570)
    current = TestSamples570{i};  % Access the cell array element once
    current = clip_spectrum(current, 10,10);
    current = remove_inclination(current, WL);
    current = correct_instrument_response(current, WL);
    current = remove_bg_poly(current);
    TestSamples570{i} = current;  % Save the result back to the cell array
end

% plotRaman(TestSamples570, 0.0)

%% DATA 20240614 SOLUTION SAMPLES RBMs,G and D Band SPEC AT 514nm


SolutionSamples514={
        DATA_20240515.BAL570RA
        DATA_20240515.BAL570RB
        DATA_20240515.BAL570D
        DATA_20240515.BAL570G
        DATA_20240515.BAL570C

        DATA_20240515.BBL570RA
        DATA_20240515.BBL570RB
        DATA_20240515.BBL570D
        DATA_20240515.BBL570G
        DATA_20240515.BBL570C
    };

WL = 570;

for i=1:length(TestSamples570)
    current = TestSamples570{i};  % Access the cell array element once
    current = clip_spectrum(current, 10,10);
    current = remove_inclination(current, WL);
    current = correct_instrument_response(current, WL);
    current = remove_bg_poly(current);
    TestSamples570{i} = current;  % Save the result back to the cell array
end

plotRaman(TestSamples570, 0.0)

function DS = clipRangeEdges(DS, min_value, max_value)
    % Find the indices where X is within the specified range
    idx = DS.X >= min_value & DS.X <= max_value;
    
    % Filter X and Y based on these indices
    DS.X = DS.X(idx);
    DS.Y = DS.Y(idx);
    DS.P = DS.P(idx);
end

function DS = remove_gaussian_profile(DS, sigma)
    % Remove Gaussian profile from Raman spectrum centered at zero
    % DS: structure with fields X (Raman shift) and Y (intensity)
    % sigma: standard deviation for the Gaussian profile

    % Extract the X and Y data
    X = DS.X;  % Raman shift (assumed centered at zero)
    Y = DS.Y;  % Intensity values

    % Define the Gaussian function centered at zero
    gaussian = @(x, A, sigma) A * exp(-((x).^2) / (2 * sigma^2));

    % Initial guess for parameters [Amplitude]
    A_initial = max(Y);  % Initial amplitude (could be the max value)

    % Fit the Gaussian to the data near the center
    idx_fit = (X > -20) & (X < 20);  % Fit range around zero (adjust as needed)

    % Fit the Gaussian using lsqcurvefit
    options = optimset('Display', 'off');  % Suppress output
    initial_guess = [A_initial];

    % Use lsqcurvefit to find the best-fit parameters
    [fit_params, ~] = lsqcurvefit(@(A, x) gaussian(x, A, sigma), initial_guess, X(idx_fit), Y(idx_fit));

    % Generate the fitted Gaussian profile across the entire spectrum
    fitted_gaussian = gaussian(X, fit_params(1), sigma);

    % Subtract the fitted Gaussian from the original spectrum
    Y_corrected = Y - fitted_gaussian;

    % Update the structure with the corrected Y values
    DS.Y = Y_corrected;

    % Optionally, return the fitted Gaussian parameters
    % if nargout > 1
    %     varargout{1} = fit_params;
    % end
end

